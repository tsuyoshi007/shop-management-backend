{"version":3,"sources":["components/Inventory/Product/Forms/AddEditForm.jsx","components/Inventory/Product/Modals/AddEditModal.jsx","components/Inventory/Product/Tables/ProductTable.jsx","views/Products.jsx","components/Dashboard/Charts/SalesGraph.jsx","components/Dashboard/Tables/Statistics.jsx","components/Dashboard/Toasts/TodayToast.jsx","views/Dashboard.jsx","layout/Admin.jsx","serviceWorker.js","index.js"],"names":["AddEditForm","state","product_id","product_name","description","quantity","price","category_id","onChange","e","setState","target","name","value","submitFormAdd","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","item","Array","isArray","props","addItemToState","length","toggle","console","log","catch","err","submitFormEdit","updateState","this","Form","onSubmit","FormGroup","Label","for","Input","type","id","Button","React","Component","ProductModal","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","ProductTable","deleteItem","window","confirm","deleteItemFromState","items","map","key","scope","width","Table","responsive","hover","Inventory","itemIndex","findIndex","data","newArray","slice","updatedItems","filter","getItems","Container","fluid","Row","Col","margin","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","SalesGraph","Card","CardHeader","CardTitle","CardBody","height","options","maintainAspectRatio","Statistics","TodayToast","Toast","ToastBody","Dashboard","lg","NavBar","useState","setIsOpen","Navbar","light","expand","NavbarBrand","tag","Link","to","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","path","Products","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99e33ec4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\n\nclass AddEditForm extends React.Component {\n  state = {\n    product_id: \"\",\n    product_name: \"\",\n    description: \"\",\n    quantity: \"\",\n    price: \"\",\n    category_id: \"\"\n  };\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitFormAdd = e => {\n    e.preventDefault();\n    fetch(\"/api/product\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        product_name: this.state.product_name,\n        description: this.state.description,\n        quantity: this.state.quantity,\n        price: this.state.price,\n        category_id: this.state.category_id\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if (Array.isArray(item)) {\n          this.props.addItemToState(item[item.length - 1]);\n          this.props.toggle();\n        } else {\n          console.log(\"failure\");\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  submitFormEdit = e => {\n    e.preventDefault();\n    fetch(\"/api/product\", {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        product_id: this.state.product_id,\n        product_name: this.state.product_name,\n        description: this.state.description,\n        quantity: this.state.quantity,\n        price: this.state.price,\n        category_id: this.state.category_id\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if (Array.isArray(item)) {\n          this.props.updateState(item[item.length - 1]);\n          this.props.toggle();\n        } else {\n          console.log(\"failure\");\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  componentDidMount() {\n    // if item exists, populate the state with proper data\n    if (this.props.item) {\n      const {\n        product_id,\n        product_name,\n        description,\n        quantity,\n        price,\n        category_id\n      } = this.props.item;\n      this.setState({\n        product_id,\n        product_name,\n        description,\n        quantity,\n        price,\n        category_id\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}\n      >\n        <FormGroup>\n          <Label for=\"product_name\">Product Name</Label>\n          <Input\n            type=\"text\"\n            name=\"product_name\"\n            id=\"product_name\"\n            onChange={this.onChange}\n            value={\n              this.state.product_name === null ? \"\" : this.state.product_name\n            }\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"description\">Description</Label>\n          <Input\n            type=\"text\"\n            name=\"description\"\n            id=\"description\"\n            onChange={this.onChange}\n            value={\n              this.state.description === null ? \"\" : this.state.description\n            }\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"\">Quantity</Label>\n          <Input\n            type=\"text\"\n            name=\"quantity\"\n            id=\"quantity\"\n            onChange={this.onChange}\n            value={this.state.quantity === null ? \"\" : this.state.quantity}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"price\">Price</Label>\n          <Input\n            type=\"text\"\n            name=\"price\"\n            id=\"price\"\n            onChange={this.onChange}\n            value={this.state.price === null ? \"\" : this.state.price}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"category_id\">Category</Label>\n          <Input\n            type=\"text\"\n            name=\"category_id\"\n            id=\"category_id\"\n            onChange={this.onChange}\n            value={\n              this.state.category_id === null ? \"\" : this.state.category_id\n            }\n          />\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default AddEditForm;\n","import React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport AddEditForm from \"../Forms/AddEditForm\";\n\nclass ProductModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  render() {\n    const closeBtn = (\n      <button className=\"close\" onClick={this.toggle}>\n        &times;\n      </button>\n    );\n\n    const label = this.props.buttonLabel;\n\n    let button = \"\";\n    let title = \"\";\n\n    if (label === \"Edit\") {\n      button = (\n        <Button\n          color=\"warning\"\n          onClick={this.toggle}\n          style={{ float: \"left\", marginRight: \"10px\" }}\n        >\n          {label}\n        </Button>\n      );\n      title = \"Edit Item\";\n    } else {\n      button = (\n        <Button\n          color=\"success\"\n          onClick={this.toggle}\n          style={{ float: \"left\", marginRight: \"10px\" }}\n        >\n          {label}\n        </Button>\n      );\n      title = \"Add New Item\";\n    }\n\n    return (\n      <div>\n        {button}\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.toggle} close={closeBtn}>\n            {title}\n          </ModalHeader>\n          <ModalBody>\n            <AddEditForm\n              addItemToState={this.props.addItemToState}\n              updateState={this.props.updateState}\n              toggle={this.toggle}\n              item={this.props.item}\n            />\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ProductModal;\n","import React, { Component } from \"react\";\nimport { Table, Button } from \"reactstrap\";\nimport ProductModal from \"../Modals/AddEditModal\";\n\nclass ProductTable extends Component {\n  deleteItem = product_id => {\n    let confirmDelete = window.confirm(\"Delete item forever?\");\n    if (confirmDelete) {\n      fetch(\"/api/product\", {\n        method: \"delete\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          product_id: product_id\n        })\n      })\n        .then(response => response.json())\n        .then(item => {\n          this.props.deleteItemFromState(product_id);\n        })\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n    const items = this.props.items.map(item => {\n      return (\n        <tr key={item.product_id}>\n          <th scope=\"row\">{item.product_id}</th>\n          <td>{item.product_name}</td>\n          <td>{item.description}</td>\n          <td>{item.quantity}</td>\n          <td>{item.price}</td>\n          <td>{item.category_id}</td>\n          <td>\n            <div style={{ width: \"110px\" }}>\n              <ProductModal\n                buttonLabel=\"Edit\"\n                item={item}\n                updateState={this.props.updateState}\n              />\n              <Button\n                color=\"danger\"\n                onClick={() => this.deleteItem(item.product_id)}\n              >\n                Del\n              </Button>\n            </div>\n          </td>\n        </tr>\n      );\n    });\n\n    return (\n      <Table responsive hover>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Quantity</th>\n            <th>Price</th>\n            <th>Category</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>{items}</tbody>\n      </Table>\n    );\n  }\n}\n\nexport default ProductTable;\n","import React, { Component } from \"react\";\nimport { Row, Col, Container } from \"reactstrap\";\nimport ProductModal from \"../components/Inventory/Product/Modals/AddEditModal\";\nimport ProductTable from \"../components/Inventory/Product/Tables/ProductTable\";\n\nclass Inventory extends Component {\n  state = {\n    items: []\n  };\n\n  getItems() {\n    fetch(\"http://localhost:3000/api/product\")\n      .then(response => response.json())\n      .then(items => {\n        this.setState({\n          items\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  addItemToState = item => {\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }));\n  };\n\n  updateState = item => {\n    const itemIndex = this.state.items.findIndex(\n      data => data.product_id === item.product_id\n    );\n    const newArray = [\n      ...this.state.items.slice(0, itemIndex),\n      item,\n      ...this.state.items.slice(itemIndex + 1)\n    ];\n    this.setState({\n      items: newArray\n    });\n  };\n\n  deleteItemFromState = product_id => {\n    const updatedItems = this.state.items.filter(\n      item => item.product_id !== product_id\n    );\n    this.setState({\n      items: updatedItems\n    });\n  };\n\n  componentDidMount() {\n    this.getItems();\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col>\n            <h1\n              style={{\n                margin: \"20px 0\"\n              }}\n            >\n              Products\n            </h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ProductTable\n              items={this.state.items}\n              updateState={this.updateState}\n              deleteItemFromState={this.deleteItemFromState}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ProductModal\n              buttonLabel=\"Add Item\"\n              addItemToState={this.addItemToState}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Inventory;\n","import React, { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Card, CardBody, CardHeader, CardTitle } from \"reactstrap\";\n\nconst data = {\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n  datasets: [\n    {\n      label: \"My First dataset\",\n      backgroundColor: \"rgba(255,99,132,0.2)\",\n      borderColor: \"rgba(255,99,132,1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n      hoverBorderColor: \"rgba(255,99,132,1)\",\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }\n  ]\n};\n\nclass SalesGraph extends Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sales Graph</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Bar\n            data={data}\n            width={100}\n            height={50}\n            options={{\n              maintainAspectRatio: true\n            }}\n          />\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default SalesGraph;\n","import React, { Component } from \"react\";\nimport { Table, Card, CardHeader, CardTitle } from \"reactstrap\";\n\nclass Statistics extends Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Statistics</CardTitle>\n        </CardHeader>\n\n        <Table hover>\n          <tbody>\n            <tr>\n              <th scope=\"row\">1</th>\n              <td>Mark</td>\n              <td>Otto</td>\n              <td>@mdo</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">2</th>\n              <td>Jacob</td>\n              <td>Thornton</td>\n              <td>@fat</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">3</th>\n              <td>Larry</td>\n              <td>the Bird</td>\n              <td>@twitter</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Card>\n    );\n  }\n}\n\nexport default Statistics;\n","import React, { Component } from \"react\";\nimport { Row, Col, Toast, ToastBody } from \"reactstrap\";\n\nclass TodayToast extends Component {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Toast>\n            <ToastBody>\n              <p className=\"h2 text-info\">312</p>\n              <p className=\"\">Total Sales</p>\n            </ToastBody>\n          </Toast>\n        </Col>\n        <Col>\n          <Toast>\n            <ToastBody>\n              <p className=\"h2 text-info\">198</p>\n              <p className=\"\">Total Expenses</p>\n            </ToastBody>\n          </Toast>\n        </Col>\n        <Col>\n          <Toast>\n            <ToastBody>\n              <p className=\"h2 text-info\">114</p>\n              <p className=\"\">Total Profit</p>\n            </ToastBody>\n          </Toast>\n        </Col>\n        <Col>\n          <Toast>\n            <ToastBody>\n              <p className=\"h2 text-info\">5</p>\n              <p className=\"\">Total Out of Stock Products</p>\n            </ToastBody>\n          </Toast>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default TodayToast;\n","import React, { Component } from \"react\";\nimport { Row, Col, Container } from \"reactstrap\";\nimport SalesGraph from \"../components/Dashboard/Charts/SalesGraph\";\nimport Statistics from \"../components/Dashboard/Tables/Statistics\";\nimport TodayToast from \"../components/Dashboard/Toasts/TodayToast\";\n\nclass Dashboard extends Component {\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col>\n            <TodayToast />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"6\">\n            <SalesGraph />\n          </Col>\n          <Col lg=\"6\">\n            <Statistics />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { useState } from \"react\";\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Products from \"../views/Products\";\nimport Dashboard from \"../views/Dashboard.jsx\";\n\nconst NavBar = props => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Router>\n        <div>\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">\n              Testing\n            </NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>\n                  <NavLink tag={Link} to=\"/dashboard\">\n                    Dashboard\n                  </NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    Inventory\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                    <DropdownItem tag={Link} to=\"/inventory\">\n                      Products\n                    </DropdownItem>\n                    <DropdownItem divider />\n                    <DropdownItem tag={Link} to=\"/inventory\">\n                      Categories\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </Nav>\n              <NavbarText>Settings</NavbarText>\n            </Collapse>\n          </Navbar>\n          <Switch>\n            <Route path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            <Route path=\"/inventory\">\n              <Products />\n            </Route>\n            <Route path=\"/\">\n              <Dashboard />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default NavBar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./layout/Admin\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./asset/styles/custom.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}